/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EventFeed } from "./EventFeed";
import { EventFeedCountArgs } from "./EventFeedCountArgs";
import { EventFeedFindManyArgs } from "./EventFeedFindManyArgs";
import { EventFeedFindUniqueArgs } from "./EventFeedFindUniqueArgs";
import { DeleteEventFeedArgs } from "./DeleteEventFeedArgs";
import { EventFeedService } from "../eventFeed.service";
@graphql.Resolver(() => EventFeed)
export class EventFeedResolverBase {
  constructor(protected readonly service: EventFeedService) {}

  async _eventFeedsMeta(
    @graphql.Args() args: EventFeedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EventFeed])
  async eventFeeds(
    @graphql.Args() args: EventFeedFindManyArgs
  ): Promise<EventFeed[]> {
    return this.service.eventFeeds(args);
  }

  @graphql.Query(() => EventFeed, { nullable: true })
  async eventFeed(
    @graphql.Args() args: EventFeedFindUniqueArgs
  ): Promise<EventFeed | null> {
    const result = await this.service.eventFeed(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EventFeed)
  async deleteEventFeed(
    @graphql.Args() args: DeleteEventFeedArgs
  ): Promise<EventFeed | null> {
    try {
      return await this.service.deleteEventFeed(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
