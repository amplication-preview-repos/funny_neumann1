/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EventFeedService } from "../eventFeed.service";
import { EventFeedCreateInput } from "./EventFeedCreateInput";
import { EventFeed } from "./EventFeed";
import { EventFeedFindManyArgs } from "./EventFeedFindManyArgs";
import { EventFeedWhereUniqueInput } from "./EventFeedWhereUniqueInput";
import { EventFeedUpdateInput } from "./EventFeedUpdateInput";

export class EventFeedControllerBase {
  constructor(protected readonly service: EventFeedService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EventFeed })
  async createEventFeed(
    @common.Body() data: EventFeedCreateInput
  ): Promise<EventFeed> {
    return await this.service.createEventFeed({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EventFeed] })
  @ApiNestedQuery(EventFeedFindManyArgs)
  async eventFeeds(@common.Req() request: Request): Promise<EventFeed[]> {
    const args = plainToClass(EventFeedFindManyArgs, request.query);
    return this.service.eventFeeds({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EventFeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async eventFeed(
    @common.Param() params: EventFeedWhereUniqueInput
  ): Promise<EventFeed | null> {
    const result = await this.service.eventFeed({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EventFeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEventFeed(
    @common.Param() params: EventFeedWhereUniqueInput,
    @common.Body() data: EventFeedUpdateInput
  ): Promise<EventFeed | null> {
    try {
      return await this.service.updateEventFeed({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EventFeed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEventFeed(
    @common.Param() params: EventFeedWhereUniqueInput
  ): Promise<EventFeed | null> {
    try {
      return await this.service.deleteEventFeed({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
